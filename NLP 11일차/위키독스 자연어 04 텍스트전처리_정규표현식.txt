Regular Expression

파이썬에서 제공하는 정규표현식 모듈 -> 특정 규칙이 있는 텍스트
데이터를 빠르게 정제할수있고 이를 NLTK와 연동시켜서 토큰화시켜버린다.

. : 한개의 문자를 나타낸다.
? : 앞에 문자가 한개 존재 할 수도 있고, 존재하지 않을수도 있다 (0개또는 1개)
* : 앞에 문자가 무한개 존재할 수도있고, 존재하지 않을수도 있다.
+ : 앞에 문자가 최소 한 개 이상 존재한다. (문자가1개이상)
^ : 뒤의 문자로 문자열이 시작된다.
$ : 앞의 문자로 문자열이 끝난다.
{정수} : 정수만큼 반복한다 
{정수1,정수2} : 정수1이상 정수2이하 만큼 반복한다.?,*,+으로 대체가능
{정수,} : 정수 이상만큼 반복한다.
[] : 대괄호 안의 문자들중 한대와 매치한다.[A-Za-z]이면 문자열에
알파벳이 존재하면 매치
[^문자] : 해당문자를 제외한 모든 문자를 매치
a|b : a 또는 b 이다

\\ : 역 슬래쉬 문자 자체를 의미
\d : 모든 숫자를 의미한다 [0-9]랑 같은 의미
\D : 숫자를 제외한 모든문자 [^0-9]랑 같은 의미
\s : 공백을 의미한다.[\t\n\r\f\v]랑 같은 의미
\S : 공백을 제외한 모든 문자를 의미 [^\t\n\r\f\v] 이랑 같은 의미
\w : 문자 또는 숫자를 의미. [a-zA-Z0-9]랑 같은 의미
\W : [^a-zA-Z0-9]와 의미가 동일

import re
re.compile() : 정규표현식을 컴파일하는 함수 / 미리 컴파일 하자
re.match() : 문자열의 처음이 정규표현식과 매치되는지 검색
re.search() : 문자열 전체에 대해서 정규 표현식과 매치되는지 검색
re.split() : 정규표현식을 기준으로 문자열을 분리하여 리스트로 리턴
re.findall() : 문자열에서 정규 표현식과 매치되는 모든 경우의 문자열을
찾아서 리스트로 리턴 / 없다면 빈 리스트가 리턴
re.finditer() : 문자열에서 정규표현식과 매치되는 모든경우의 문자열에 대한
이터레이턴을 리턴
re.sub() : 문자열에서 정규 표현식과 일치하는 부분에 대해서 다른 문자열로 대체

실습

re.compile() : 소괄호 안에 string을 넣어주면서 조건을 부여한다. 그것을
변수에 담음으로 저변수는 조건을 테스트하는 테스터기가 된다고 생각한다.
보통 문자 바로뒤에 정규식 문법을 써버리면, 앞에 문자에 대해서 작동한다 생각


re.match() / re.search() 차이 

search는 소괄호에 전체를 대상으로 검색을 하고
match()는 처음부터 보기때문에 처음에 아니라면은 그냥 끝
re.split(" ",내용) -> 내용을 " "로 나눈 리스트를 반환해버린다. 
